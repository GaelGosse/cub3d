
;; Function mlx_flush_event (mlx_flush_event, funcdef_no=6, decl_uid=9184, cgraph_uid=7, symbol_order=6)

Partition 0: size 192 align 16
	ev

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [41 xvar+0 S8 A64])
        (reg:DI 5 di [ xvar ])) "mlx_flush_event.c":18:1 -1
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 D.9192+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "mlx_flush_event.c":18:1 -1
     (nil))
(jump_insn 7 4 8 2 (set (pc)
        (label_ref 16)) "mlx_flush_event.c":21:9 -1
     (nil)
 -> 16)
(barrier 8 7 23)
(code_label 23 8 9 4 3 (nil) [1 uses])
(note 9 23 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [41 xvar+0 S8 A64])) "mlx_flush_event.c":23:6 -1
     (nil))
(insn 11 10 12 4 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (reg/f:DI 86) [6 xvar_6(D)->display+0 S8 A64])) "mlx_flush_event.c":23:6 -1
     (nil))
(insn 12 11 13 4 (parallel [
            (set (reg:DI 87)
                (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -208 [0xffffffffffffff30])))
            (clobber (reg:CC 17 flags))
        ]) "mlx_flush_event.c":23:6 -1
     (nil))
(insn 13 12 14 4 (set (reg:DI 4 si)
        (reg:DI 87)) "mlx_flush_event.c":23:6 -1
     (nil))
(insn 14 13 15 4 (set (reg:DI 5 di)
        (reg/f:DI 82 [ _1 ])) "mlx_flush_event.c":23:6 -1
     (nil))
(call_insn 15 14 16 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("XNextEvent") [flags 0x41]  <function_decl 0x7f224bad0e00 XNextEvent>) [0 XNextEvent S1 A8])
            (const_int 0 [0]))) "mlx_flush_event.c":23:6 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(code_label 16 15 17 5 2 (nil) [1 uses])
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -216 [0xffffffffffffff28])) [41 xvar+0 S8 A64])) "mlx_flush_event.c":21:10 -1
     (nil))
(insn 19 18 20 5 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (reg/f:DI 88) [6 xvar_6(D)->display+0 S8 A64])) "mlx_flush_event.c":21:10 -1
     (nil))
(insn 20 19 21 5 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "mlx_flush_event.c":21:10 -1
     (nil))
(call_insn 21 20 22 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("XPending") [flags 0x41]  <function_decl 0x7f224bad3400 XPending>) [0 XPending S1 A8])
            (const_int 0 [0]))) "mlx_flush_event.c":21:10 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 21 24 5 (set (reg:SI 84 [ _3 ])
        (reg:SI 0 ax)) "mlx_flush_event.c":21:10 -1
     (nil))
(insn 24 22 25 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 84 [ _3 ])
            (const_int 0 [0]))) "mlx_flush_event.c":21:10 discrim 1 -1
     (nil))
(jump_insn 25 24 26 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "mlx_flush_event.c":21:10 discrim 1 -1
     (nil)
 -> 23)
(note 26 25 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 26 35 6 (clobber (reg/i:SI 0 ax)) "mlx_flush_event.c":25:1 -1
     (nil))
(insn 35 34 40 6 (clobber (reg:SI 85 [ <retval> ])) "mlx_flush_event.c":25:1 -1
     (nil))
(insn 40 35 28 6 (const_int 0 [0]) "mlx_flush_event.c":25:1 -1
     (nil))
(insn 28 40 29 6 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                                (const_int -8 [0xfffffffffffffff8])) [1 D.9192+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:DI))
        ]) "mlx_flush_event.c":25:1 -1
     (nil))
(jump_insn 29 28 38 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "mlx_flush_event.c":25:1 -1
     (nil)
 -> 32)
(note 38 29 30 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn 30 38 31 8 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f224b7b9c00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "mlx_flush_event.c":25:1 -1
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 31 30 32)
(code_label 32 31 39 9 4 (nil) [1 uses])
(note 39 32 33 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 33 39 36 9 (set (reg/i:SI 0 ax)
        (reg:SI 85 [ <retval> ])) "mlx_flush_event.c":25:1 -1
     (nil))
(insn 36 33 0 9 (use (reg/i:SI 0 ax)) "mlx_flush_event.c":25:1 -1
     (nil))
