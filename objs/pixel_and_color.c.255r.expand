
;; Function img_pix_put_2 (img_pix_put_2, funcdef_no=6, decl_uid=8718, cgraph_uid=7, symbol_order=6)

Partition 0: size 8 align 8
	pixel_16

;; Generating RTL for gimple basic block 2


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 7 NOTE_INSN_DELETED)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 game+0 S8 A64])
        (reg:DI 5 di [ game ])) "srcs/pixel_and_color.c":16:1 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [3 x+0 S4 A32])
        (reg:SI 4 si [ x ])) "srcs/pixel_and_color.c":16:1 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 y+0 S4 A32])
        (reg:SI 1 dx [ y ])) "srcs/pixel_and_color.c":16:1 -1
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [3 color+0 S4 A32])
        (reg:SI 2 cx [ color ])) "srcs/pixel_and_color.c":16:1 -1
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 game+0 S8 A64])) "srcs/pixel_and_color.c":19:14 -1
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 32 [0x20])) [7 game_13(D)->img+0 S8 A64])) "srcs/pixel_and_color.c":19:14 -1
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 8 [0x8])) [1 _1->addr+0 S8 A64])) "srcs/pixel_and_color.c":19:19 -1
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 game+0 S8 A64])) "srcs/pixel_and_color.c":19:37 -1
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 94)
                (const_int 32 [0x20])) [7 game_13(D)->img+0 S8 A64])) "srcs/pixel_and_color.c":19:37 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 85 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 84 [ _3 ])
                (const_int 20 [0x14])) [3 _3->line_len+0 S4 A32])) "srcs/pixel_and_color.c":19:42 -1
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 86 [ _5 ])
                (mult:SI (reg:SI 85 [ _4 ])
                    (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -32 [0xffffffffffffffe0])) [3 y+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":19:31 -1
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 game+0 S8 A64])) "srcs/pixel_and_color.c":20:8 -1
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 87 [ _6 ])
        (mem/f:DI (plus:DI (reg/f:DI 95)
                (const_int 32 [0x20])) [7 game_13(D)->img+0 S8 A64])) "srcs/pixel_and_color.c":20:8 -1
     (nil))
(insn 18 17 19 2 (set (reg:SI 88 [ _7 ])
        (mem:SI (plus:DI (reg/f:DI 87 [ _6 ])
                (const_int 16 [0x10])) [3 _6->bpp+0 S4 A64])) "srcs/pixel_and_color.c":20:13 -1
     (nil))
(insn 19 18 20 2 (set (reg:SI 96)
        (reg:SI 88 [ _7 ])) "srcs/pixel_and_color.c":20:19 -1
     (nil))
(insn 20 19 23 2 (parallel [
            (set (reg:SI 97)
                (plus:SI (reg:SI 96)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":20:19 -1
     (nil))
(insn 23 20 24 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 96)
            (const_int 0 [0]))) "srcs/pixel_and_color.c":20:19 -1
     (nil))
(insn 24 23 25 2 (set (reg:SI 96)
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 97)
            (reg:SI 96))) "srcs/pixel_and_color.c":20:19 -1
     (nil))
(insn 25 24 26 2 (parallel [
            (set (reg:SI 98)
                (ashiftrt:SI (reg:SI 96)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":20:19 -1
     (expr_list:REG_EQUAL (div:SI (reg:SI 88 [ _7 ])
            (const_int 8 [0x8]))
        (nil)))
(insn 26 25 27 2 (set (reg:SI 89 [ _8 ])
        (reg:SI 98)) "srcs/pixel_and_color.c":20:19 -1
     (nil))
(insn 27 26 28 2 (parallel [
            (set (reg:SI 90 [ _9 ])
                (mult:SI (reg:SI 89 [ _8 ])
                    (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -28 [0xffffffffffffffe4])) [3 x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":19:57 -1
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg:SI 91 [ _10 ])
                (plus:SI (reg:SI 86 [ _5 ])
                    (reg:SI 90 [ _9 ])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":19:53 -1
     (nil))
(insn 29 28 30 2 (set (reg:DI 92 [ _11 ])
        (sign_extend:DI (reg:SI 91 [ _10 ]))) "srcs/pixel_and_color.c":19:53 -1
     (nil))
(insn 30 29 31 2 (parallel [
            (set (reg:DI 99)
                (plus:DI (reg/f:DI 83 [ _2 ])
                    (reg:DI 92 [ _11 ])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":19:8 -1
     (nil))
(insn 31 30 32 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 pixel+0 S8 A64])
        (reg:DI 99)) "srcs/pixel_and_color.c":19:8 -1
     (nil))
(insn 32 31 33 2 (set (reg/f:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 pixel+0 S8 A64])) "srcs/pixel_and_color.c":21:16 -1
     (nil))
(insn 33 32 34 2 (set (reg:SI 101)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [3 color+0 S4 A32])) "srcs/pixel_and_color.c":21:16 -1
     (nil))
(insn 34 33 0 2 (set (mem:SI (reg/f:DI 100) [3 MEM[(int *)pixel_16]+0 S4 A32])
        (reg:SI 101)) "srcs/pixel_and_color.c":21:16 -1
     (nil))

;; Function img_pix_put (img_pix_put, funcdef_no=7, decl_uid=8713, cgraph_uid=8, symbol_order=7)

Partition 0: size 8 align 8
	pixel_16

;; Generating RTL for gimple basic block 2


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 7 NOTE_INSN_DELETED)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 game+0 S8 A64])
        (reg:DI 5 di [ game ])) "srcs/pixel_and_color.c":25:1 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [3 x+0 S4 A32])
        (reg:SI 4 si [ x ])) "srcs/pixel_and_color.c":25:1 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [3 y+0 S4 A32])
        (reg:SI 1 dx [ y ])) "srcs/pixel_and_color.c":25:1 -1
     (nil))
(insn 5 4 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [3 color+0 S4 A32])
        (reg:SI 2 cx [ color ])) "srcs/pixel_and_color.c":25:1 -1
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 game+0 S8 A64])) "srcs/pixel_and_color.c":28:14 -1
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 93)
                (const_int 32 [0x20])) [7 game_13(D)->img+0 S8 A64])) "srcs/pixel_and_color.c":28:14 -1
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 82 [ _1 ])
                (const_int 8 [0x8])) [1 _1->addr+0 S8 A64])) "srcs/pixel_and_color.c":28:19 -1
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 game+0 S8 A64])) "srcs/pixel_and_color.c":28:37 -1
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 94)
                (const_int 32 [0x20])) [7 game_13(D)->img+0 S8 A64])) "srcs/pixel_and_color.c":28:37 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 85 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 84 [ _3 ])
                (const_int 20 [0x14])) [3 _3->line_len+0 S4 A32])) "srcs/pixel_and_color.c":28:42 -1
     (nil))
(insn 15 14 16 2 (parallel [
            (set (reg:SI 86 [ _5 ])
                (mult:SI (reg:SI 85 [ _4 ])
                    (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -32 [0xffffffffffffffe0])) [3 y+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":28:31 -1
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 game+0 S8 A64])) "srcs/pixel_and_color.c":29:8 -1
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 87 [ _6 ])
        (mem/f:DI (plus:DI (reg/f:DI 95)
                (const_int 32 [0x20])) [7 game_13(D)->img+0 S8 A64])) "srcs/pixel_and_color.c":29:8 -1
     (nil))
(insn 18 17 19 2 (set (reg:SI 88 [ _7 ])
        (mem:SI (plus:DI (reg/f:DI 87 [ _6 ])
                (const_int 16 [0x10])) [3 _6->bpp+0 S4 A64])) "srcs/pixel_and_color.c":29:13 -1
     (nil))
(insn 19 18 20 2 (set (reg:SI 96)
        (reg:SI 88 [ _7 ])) "srcs/pixel_and_color.c":29:19 -1
     (nil))
(insn 20 19 23 2 (parallel [
            (set (reg:SI 97)
                (plus:SI (reg:SI 96)
                    (const_int 7 [0x7])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":29:19 -1
     (nil))
(insn 23 20 24 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 96)
            (const_int 0 [0]))) "srcs/pixel_and_color.c":29:19 -1
     (nil))
(insn 24 23 25 2 (set (reg:SI 96)
        (if_then_else:SI (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 97)
            (reg:SI 96))) "srcs/pixel_and_color.c":29:19 -1
     (nil))
(insn 25 24 26 2 (parallel [
            (set (reg:SI 98)
                (ashiftrt:SI (reg:SI 96)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":29:19 -1
     (expr_list:REG_EQUAL (div:SI (reg:SI 88 [ _7 ])
            (const_int 8 [0x8]))
        (nil)))
(insn 26 25 27 2 (set (reg:SI 89 [ _8 ])
        (reg:SI 98)) "srcs/pixel_and_color.c":29:19 -1
     (nil))
(insn 27 26 28 2 (parallel [
            (set (reg:SI 90 [ _9 ])
                (mult:SI (reg:SI 89 [ _8 ])
                    (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -28 [0xffffffffffffffe4])) [3 x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":28:57 -1
     (nil))
(insn 28 27 29 2 (parallel [
            (set (reg:SI 91 [ _10 ])
                (plus:SI (reg:SI 86 [ _5 ])
                    (reg:SI 90 [ _9 ])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":28:53 -1
     (nil))
(insn 29 28 30 2 (set (reg:DI 92 [ _11 ])
        (sign_extend:DI (reg:SI 91 [ _10 ]))) "srcs/pixel_and_color.c":28:53 -1
     (nil))
(insn 30 29 31 2 (parallel [
            (set (reg:DI 99)
                (plus:DI (reg/f:DI 83 [ _2 ])
                    (reg:DI 92 [ _11 ])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":28:8 -1
     (nil))
(insn 31 30 32 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 pixel+0 S8 A64])
        (reg:DI 99)) "srcs/pixel_and_color.c":28:8 -1
     (nil))
(insn 32 31 33 2 (set (reg/f:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 pixel+0 S8 A64])) "srcs/pixel_and_color.c":30:16 -1
     (nil))
(insn 33 32 34 2 (set (reg:SI 101)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [3 color+0 S4 A32])) "srcs/pixel_and_color.c":30:16 -1
     (nil))
(insn 34 33 0 2 (set (mem:SI (reg/f:DI 100) [3 MEM[(int *)pixel_16]+0 S4 A32])
        (reg:SI 101)) "srcs/pixel_and_color.c":30:16 -1
     (nil))

;; Function get_color (get_color, funcdef_no=8, decl_uid=8708, cgraph_uid=9, symbol_order=8)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 17.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 red+0 S4 A32])
        (reg:SI 5 di [ red ])) "srcs/pixel_and_color.c":34:1 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 green+0 S4 A32])
        (reg:SI 4 si [ green ])) "srcs/pixel_and_color.c":34:1 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 blue+0 S4 A32])
        (reg:SI 1 dx [ blue ])) "srcs/pixel_and_color.c":34:1 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 87)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 red+0 S4 A32])) "srcs/pixel_and_color.c":35:15 -1
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:SI 82 [ _1 ])
                (ashift:SI (reg:SI 87)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":35:15 -1
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])) [3 red+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))
(insn 10 9 11 2 (set (reg:SI 88)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 green+0 S4 A32])) "srcs/pixel_and_color.c":35:31 -1
     (nil))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 83 [ _2 ])
                (ashift:SI (reg:SI 88)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":35:31 -1
     (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [3 green+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 84 [ _3 ])
                (ior:SI (reg:SI 82 [ _1 ])
                    (reg:SI 83 [ _2 ])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":35:22 -1
     (nil))
(insn 13 12 16 2 (parallel [
            (set (reg:SI 85 [ _7 ])
                (ior:SI (reg:SI 84 [ _3 ])
                    (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                            (const_int -12 [0xfffffffffffffff4])) [3 blue+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "srcs/pixel_and_color.c":35:37 -1
     (nil))
(insn 16 13 20 2 (set (reg:SI 86 [ <retval> ])
        (reg:SI 85 [ _7 ])) "srcs/pixel_and_color.c":35:37 discrim 1 -1
     (nil))
(insn 20 16 21 2 (set (reg/i:SI 0 ax)
        (reg:SI 86 [ <retval> ])) "srcs/pixel_and_color.c":36:1 -1
     (nil))
(insn 21 20 0 2 (use (reg/i:SI 0 ax)) "srcs/pixel_and_color.c":36:1 -1
     (nil))
